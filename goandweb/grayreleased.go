package main

/**
*  @Author <a href="mailto:gisonwin@qq.com">GisonWin</a>
*  @Date  2020/7/1 22:30
 */
/***
*互联网系统的灰度发布一般有两种:
1.通过分批次部署实现灰度发布
2.通过业务规则进行灰度发布
在对系统的旧功能进行升级迭代时,第一种方式用的比较多.
新功能上线时,第二种方式用的比较多,当对比较重要的老功能进行较大幅度修改时,
也会选择按业务规则来进行发布,因为直接全量开放给所有用户风险实在太大.
1.通过分批次部署实现灰度发布:
	假设服务部署在15个实例上,我们把15个实例分为四组,按先后顺序,分别有1-2-4-8台机器,保证
每次扩展时大概都是二倍的关系.为什么要用2倍?这样能够保证我们不管有多少台机器,都不会把组划分
太多,比如有1024台机器,实现上也就需要1-2-4-8-16-32-64-128-256-512部署10次就可以全部部署完毕.
这样我们上线最开始影响到的用户在整体用户中占的比例也不大,比如有1000台机器的服务,我们上线后
如果出现问题,也只影响1/1000的用户.如果10组完全平分,则一上线立刻就会影响1/10的用户,1/10的业务
出现问题,对公司来说就是一场不可挽回的事故了.
	在上线时最有效的观察手法是查看程序的错误日志,如果较明显的逻辑错误,一般错误日志的滚动速度都
会肉眼可见的增加.这些错误也可以通过metrics一类的系统上报给公司内的监控系统,所以在上线过程中,也
可以通过观察监控曲线,来判断是否有异常发生.如果有异常情况,首先要做的就是回滚.
2.通过业务规则进行灰度发布
	常见的灰度策略有很多较为简单的需求,比如我们的策略是要按照千分比来发布,我们可以用用户id,手机号
,用户设备信息等生成一个简单的哈希值,然后再求模,用伪代码表示如下
伪代码
// pass 3/1000
func passed() bool{
	userId:="10000"
	key := hashFunctions(userId) % 1000
	if key <= 2 {
		return true
	}
	return false
}

func hashFunctions(userId interface{}) {
	fmt.Println(userId)
}
*/
/***

常见的规则如下
1.按城市发布
2.按概率发布
3.按百分比发布
4.按白名单发布
5.按业务线发布
6.按UA发布(APP.WEB.PC)
7.按分发渠道发布
由于和公司的业务相关,所以城市,业务线,UA,分发渠道这些可能会被直接编码在系统里,不过功能大同小异.
按白名单发布比较简单,功能上线时,可能我们希望只有公司内部的员工和测试人员可以访问到新功能,会直接
把帐号,邮箱写入到白名单,拒绝其他任务帐号访问.
按概率发布则是指实现一个简单的函数
*/
func isTrue() bool{
	return true //true/false according to the rate provided by user.
}
/**
*举例,网站的注册环节,可能有两套API,按照用户ID进行灰度,分别是不同的存取逻辑.如果存储时使用了V1版本的API
而获取时使用V2版本的API,则可能会出现用户注册成功后反而返回注册失败消息的诡异问题.
 */